services:
    image: postgres:13-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "5432:5432"
    networks:
      - my-network
    volumes:
      - pg_data:/var/lib/postgresql/data

  nestjs:
    container_name: back
    image: node:20-alpine # Use the official Node 14 image
    working_dir: /app  # Set working directory
    volumes:
      - .:/usr/src/app  # Mount the current direc
    environment:
      NODE_ENV: production
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      JWT_SECRET: ${JWT_SECRET}
    command: sh -c "npm install && npm run start:prod"
    ports:
      - "3000:3000"
    networks:
      - my-network
    depends_on:
      - postgres 
    restart: always

  nginx:
    container_name: nginx
    image: nginx:stable-alpine3.20-perl
    expose:
      - "80"
      - "443"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf
      - ./front:/var/www/rentx.fr
      - /etc/letsencrypt/live/rentx.fr/fullchain.pem:/etc/letsencrypt/live/rentx.fr/fullchain.pem
      - /etc/letsencrypt/live/rentx.fr/privkey.pem:/etc/letsencrypt/live/rentx.fr/privkey.pem

    depends_on:
      - angular
    restart: unless-stopped
    networks:

volumes:
  pg_data:
  
networks:
  my-network:
    driver: bridge